//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity levelMapEntity { get { return GetGroup(GameMatcher.LevelMap).GetSingleEntity(); } }
    public LevelMapComponent levelMap { get { return levelMapEntity.levelMap; } }
    public bool hasLevelMap { get { return levelMapEntity != null; } }

    public GameEntity SetLevelMap(System.Collections.Generic.List<System.Collections.Generic.List<System.ValueTuple<int, string>>> newPathVariants) {
        if (hasLevelMap) {
            throw new Entitas.EntitasException("Could not set LevelMap!\n" + this + " already has an entity with LevelMapComponent!",
                "You should check if the context already has a levelMapEntity before setting it or use context.ReplaceLevelMap().");
        }
        var entity = CreateEntity();
        entity.AddLevelMap(newPathVariants);
        return entity;
    }

    public void ReplaceLevelMap(System.Collections.Generic.List<System.Collections.Generic.List<System.ValueTuple<int, string>>> newPathVariants) {
        var entity = levelMapEntity;
        if (entity == null) {
            entity = SetLevelMap(newPathVariants);
        } else {
            entity.ReplaceLevelMap(newPathVariants);
        }
    }

    public void RemoveLevelMap() {
        levelMapEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public LevelMapComponent levelMap { get { return (LevelMapComponent)GetComponent(GameComponentsLookup.LevelMap); } }
    public bool hasLevelMap { get { return HasComponent(GameComponentsLookup.LevelMap); } }

    public void AddLevelMap(System.Collections.Generic.List<System.Collections.Generic.List<System.ValueTuple<int, string>>> newPathVariants) {
        var index = GameComponentsLookup.LevelMap;
        var component = (LevelMapComponent)CreateComponent(index, typeof(LevelMapComponent));
        component.pathVariants = newPathVariants;
        AddComponent(index, component);
    }

    public void ReplaceLevelMap(System.Collections.Generic.List<System.Collections.Generic.List<System.ValueTuple<int, string>>> newPathVariants) {
        var index = GameComponentsLookup.LevelMap;
        var component = (LevelMapComponent)CreateComponent(index, typeof(LevelMapComponent));
        component.pathVariants = newPathVariants;
        ReplaceComponent(index, component);
    }

    public void RemoveLevelMap() {
        RemoveComponent(GameComponentsLookup.LevelMap);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherLevelMap;

    public static Entitas.IMatcher<GameEntity> LevelMap {
        get {
            if (_matcherLevelMap == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.LevelMap);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherLevelMap = matcher;
            }

            return _matcherLevelMap;
        }
    }
}
